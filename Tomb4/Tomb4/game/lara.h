#pragma once

constexpr auto LARA_HITPOINTS = 1000;

void lara_void_func(ItemInfo* item, COLL_INFO* coll);
void LaraAboveWater(ItemInfo* item, COLL_INFO* coll);
void SetCornerAnim(ItemInfo* item, COLL_INFO* coll, short rot, short flip);
long CanLaraHangSideways(ItemInfo* item, COLL_INFO* coll, short angle);
void lara_as_hang(ItemInfo* item, COLL_INFO* coll);
void lara_col_hang(ItemInfo* item, COLL_INFO* coll);
short LaraCeilingFront(ItemInfo* item, short ang, long dist, long h);
short LaraFloorFront(ItemInfo* item, short ang, long dist);
long LaraFallen(ItemInfo* item, COLL_INFO* coll);
long TestLaraSlide(ItemInfo* item, COLL_INFO* coll);
long LaraHitCeiling(ItemInfo* item, COLL_INFO* coll);
void lara_as_duckl(ItemInfo* item, COLL_INFO* coll);
void lara_as_duckr(ItemInfo* item, COLL_INFO* coll);
void lara_col_ducklr(ItemInfo* item, COLL_INFO* coll);
void lara_as_duck(ItemInfo* item, COLL_INFO* coll);
void lara_col_duck(ItemInfo* item, COLL_INFO* coll);
void lara_as_all4s(ItemInfo* item, COLL_INFO* coll);
void lara_col_all4s(ItemInfo* item, COLL_INFO* coll);
void lara_as_crawl(ItemInfo* item, COLL_INFO* coll);
void lara_col_crawl(ItemInfo* item, COLL_INFO* coll);
long LaraDeflectEdgeDuck(ItemInfo* item, COLL_INFO* coll);
void lara_as_all4turnl(ItemInfo* item, COLL_INFO* coll);
void lara_as_all4turnr(ItemInfo* item, COLL_INFO* coll);
void lara_col_all4turnlr(ItemInfo* item, COLL_INFO* coll);
void lara_as_crawlb(ItemInfo* item, COLL_INFO* coll);
void lara_col_crawlb(ItemInfo* item, COLL_INFO* coll);
void lara_col_crawl2hang(ItemInfo* item, COLL_INFO* coll);
void lara_as_dash(ItemInfo* item, COLL_INFO* coll);
void lara_col_dash(ItemInfo* item, COLL_INFO* coll);
void GetLaraCollisionInfo(ItemInfo* item, COLL_INFO* coll);
void lara_as_dashdive(ItemInfo* item, COLL_INFO* coll);
void lara_col_dashdive(ItemInfo* item, COLL_INFO* coll);
long LaraLandedBad(ItemInfo* item, COLL_INFO* coll);
void MonkeySwingFall(ItemInfo* item);
void MonkeySwingSnap(ItemInfo* item, COLL_INFO* coll);
void lara_as_hang2(ItemInfo* item, COLL_INFO* coll);
void lara_col_hang2(ItemInfo* item, COLL_INFO* coll);
void lara_as_monkeyswing(ItemInfo* item, COLL_INFO* coll);
void lara_col_monkeyswing(ItemInfo* item, COLL_INFO* coll);
void lara_as_monkeyl(ItemInfo* item, COLL_INFO* coll);
void lara_col_monkeyl(ItemInfo* item, COLL_INFO* coll);
void lara_as_monkeyr(ItemInfo* item, COLL_INFO* coll);
void lara_col_monkeyr(ItemInfo* item, COLL_INFO* coll);
void lara_as_hangturnl(ItemInfo* item, COLL_INFO* coll);
void lara_as_hangturnr(ItemInfo* item, COLL_INFO* coll);
void lara_col_hangturnlr(ItemInfo* item, COLL_INFO* coll);
void lara_as_monkey180(ItemInfo* item, COLL_INFO* coll);
void lara_col_monkey180(ItemInfo* item, COLL_INFO* coll);
void lara_as_hangleft(ItemInfo* item, COLL_INFO* coll);
void lara_col_hangleft(ItemInfo* item, COLL_INFO* coll);
void lara_as_hangright(ItemInfo* item, COLL_INFO* coll);
void lara_col_hangright(ItemInfo* item, COLL_INFO* coll);
void lara_as_extcornerl(ItemInfo* item, COLL_INFO* coll);
void lara_as_extcornerr(ItemInfo* item, COLL_INFO* coll);
void lara_as_intcornerl(ItemInfo* item, COLL_INFO* coll);
void lara_as_intcornerr(ItemInfo* item, COLL_INFO* coll);
void lara_as_splat(ItemInfo* item, COLL_INFO* coll);
void lara_col_splat(ItemInfo* item, COLL_INFO* coll);
void lara_as_compress(ItemInfo* item, COLL_INFO* coll);
void lara_col_compress(ItemInfo* item, COLL_INFO* coll);
void lara_as_back(ItemInfo* item, COLL_INFO* coll);
void lara_col_back(ItemInfo* item, COLL_INFO* coll);
void lara_as_null(ItemInfo* item, COLL_INFO* coll);
void lara_as_fastturn(ItemInfo* item, COLL_INFO* coll);
void lara_as_stepright(ItemInfo* item, COLL_INFO* coll);
void lara_col_stepright(ItemInfo* item, COLL_INFO* coll);
void lara_as_stepleft(ItemInfo* item, COLL_INFO* coll);
void lara_col_stepleft(ItemInfo* item, COLL_INFO* coll);
void lara_as_slide(ItemInfo* item, COLL_INFO* coll);
void lara_col_slide(ItemInfo* item, COLL_INFO* coll);
void lara_as_backjump(ItemInfo* item, COLL_INFO* coll);
void lara_col_backjump(ItemInfo* item, COLL_INFO* coll);
void lara_as_rightjump(ItemInfo* item, COLL_INFO* coll);
void lara_col_rightjump(ItemInfo* item, COLL_INFO* coll);
void lara_as_leftjump(ItemInfo* item, COLL_INFO* coll);
void lara_col_leftjump(ItemInfo* item, COLL_INFO* coll);
void lara_as_fallback(ItemInfo* item, COLL_INFO* coll);
void lara_col_fallback(ItemInfo* item, COLL_INFO* coll);
void lara_as_slideback(ItemInfo* item, COLL_INFO* coll);
void lara_col_slideback(ItemInfo* item, COLL_INFO* coll);
void lara_col_roll(ItemInfo* item, COLL_INFO* coll);
void lara_col_roll2(ItemInfo* item, COLL_INFO* coll);
void lara_as_pushblock(ItemInfo* item, COLL_INFO* coll);
void lara_as_pullblock(ItemInfo* item, COLL_INFO* coll);
void lara_as_ppready(ItemInfo* item, COLL_INFO* coll);
void lara_as_pickup(ItemInfo* item, COLL_INFO* coll);
void lara_as_pickupflare(ItemInfo* item, COLL_INFO* coll);
void lara_as_switchon(ItemInfo* item, COLL_INFO* coll);
void lara_as_usekey(ItemInfo* item, COLL_INFO* coll);
void lara_as_usepuzzle(ItemInfo* item, COLL_INFO* coll);
void lara_as_special(ItemInfo* item, COLL_INFO* coll);
void lara_as_swandive(ItemInfo* item, COLL_INFO* coll);
void lara_col_swandive(ItemInfo* item, COLL_INFO* coll);
void lara_as_fastdive(ItemInfo* item, COLL_INFO* coll);
void lara_col_fastdive(ItemInfo* item, COLL_INFO* coll);
void lara_as_waterout(ItemInfo* item, COLL_INFO* coll);
void lara_as_wade(ItemInfo* item, COLL_INFO* coll);
void lara_col_wade(ItemInfo* item, COLL_INFO* coll);
void lara_default_col(ItemInfo* item, COLL_INFO* coll);
void lara_as_deathslide(ItemInfo* item, COLL_INFO* coll);
void lara_as_controlled(ItemInfo* item, COLL_INFO* coll);
void lara_as_controlledl(ItemInfo* item, COLL_INFO* coll);
void lara_col_turnswitch(ItemInfo* item, COLL_INFO* coll);
void lara_as_pulley(ItemInfo* item, COLL_INFO* coll);
void lara_as_walk(ItemInfo* item, COLL_INFO* coll);
void lara_col_walk(ItemInfo* item, COLL_INFO* coll);
void lara_as_run(ItemInfo* item, COLL_INFO* coll);
void lara_col_run(ItemInfo* item, COLL_INFO* coll);
void lara_as_fastback(ItemInfo* item, COLL_INFO* coll);
void lara_col_fastback(ItemInfo* item, COLL_INFO* coll);
void lara_as_turn_r(ItemInfo* item, COLL_INFO* coll);
void lara_col_turn_r(ItemInfo* item, COLL_INFO* coll);
void lara_as_turn_l(ItemInfo* item, COLL_INFO* coll);
void lara_col_turn_l(ItemInfo* item, COLL_INFO* coll);
void lara_as_death(ItemInfo* item, COLL_INFO* coll);
void lara_col_death(ItemInfo* item, COLL_INFO* coll);
void lara_as_fastfall(ItemInfo* item, COLL_INFO* coll);
void lara_col_fastfall(ItemInfo* item, COLL_INFO* coll);
void lara_as_stop(ItemInfo* item, COLL_INFO* coll);
void lara_col_stop(ItemInfo* item, COLL_INFO* coll);
void lara_col_pose(ItemInfo* item, COLL_INFO* coll);
void lara_as_upjump(ItemInfo* item, COLL_INFO* coll);
void lara_col_upjump(ItemInfo* item, COLL_INFO* coll);
void lara_as_forwardjump(ItemInfo* item, COLL_INFO* coll);
void lara_col_forwardjump(ItemInfo* item, COLL_INFO* coll);
void lara_as_reach(ItemInfo* item, COLL_INFO* coll);
void lara_col_reach(ItemInfo* item, COLL_INFO* coll);
void lara_col_polestat(ItemInfo* item, COLL_INFO* coll);
void lara_as_poleleft(ItemInfo* item, COLL_INFO* coll);
void lara_as_poleright(ItemInfo* item, COLL_INFO* coll);
void lara_col_poleup(ItemInfo* item, COLL_INFO* coll);
void lara_col_poledown(ItemInfo* item, COLL_INFO* coll);
void lara_as_rope(ItemInfo* item, COLL_INFO* coll);
void lara_col_rope(ItemInfo* item, COLL_INFO* coll);
void lara_as_ropel(ItemInfo* item, COLL_INFO* coll);
void lara_as_roper(ItemInfo* item, COLL_INFO* coll);
void lara_col_ropefwd(ItemInfo* item, COLL_INFO* coll);
void lara_as_climbrope(ItemInfo* item, COLL_INFO* coll);
void lara_as_climbroped(ItemInfo* item, COLL_INFO* coll);
void lara_col_jumper(ItemInfo* item, COLL_INFO* coll);
void lara_slide_slope(ItemInfo* item, COLL_INFO* coll);
void ResetLook();
void LookUpDown();
void LookLeftRight();
long UseInventoryItems(ItemInfo* item);
void LaraDeflectEdgeJump(ItemInfo* item, COLL_INFO* coll);
void ApplyVelocityToRope(long node, ushort angle, ushort n);
long LaraTestHangOnClimbWall(ItemInfo* item, COLL_INFO* coll);
long LaraHangRightCornerTest(ItemInfo* item, COLL_INFO* coll);
long LaraHangLeftCornerTest(ItemInfo* item, COLL_INFO* coll);
void LaraSlideEdgeJump(ItemInfo* item, COLL_INFO* coll);
void JumpOffRope(ItemInfo* item);
void UpdateRopeSwing(ItemInfo* item);
void FallFromRope(ItemInfo* item);
short GetDirOctant(long rot);
short TestMonkeyLeft(ItemInfo* item, COLL_INFO* coll);
short TestMonkeyRight(ItemInfo* item, COLL_INFO* coll);
long LaraTestEdgeCatch(ItemInfo* item, COLL_INFO* coll, long* edge);
long TestHangSwingIn(ItemInfo* item, short angle);
long LaraDeflectEdge(ItemInfo* item, COLL_INFO* coll);
long TestLaraVault(ItemInfo* item, COLL_INFO* coll);
long LaraTestClimbStance(ItemInfo* item, COLL_INFO* coll);
long TestWall(ItemInfo* item, long front, long right, long down);
void LaraCollideStop(ItemInfo* item, COLL_INFO* coll);
void SnapLaraToEdgeOfBlock(ItemInfo* item, COLL_INFO* coll, short angle);
long LaraHangTest(ItemInfo* item, COLL_INFO* coll);

extern void (*lara_control_routines[118])(ItemInfo* item, COLL_INFO* coll);
extern void (*lara_collision_routines[118])(ItemInfo* item, COLL_INFO* coll);

extern LARA_INFO lara;
extern ItemInfo* lara_item;
extern short DashTimer;
